{"name":"sxmc","tagline":"SNO+ sensitivity and signal extraction with a Markov Chain Monte Carlo","body":"Signal Extraction with MCMC\r\n===========================\r\nA GPU-accelerated fit program which calculates fully frequentist confidence\r\nintervals or limits, computing the likelihood space with a Markov Chain\r\nMonte Carlo.\r\n\r\nBuilding\r\n--------\r\n`sxmc` requires the following libraries:\r\n\r\n* CUDA (and the nvcc compiler)\r\n* JsonCpp\r\n* ROOT\r\n* RAT (to make PDFs from MC files)\r\n* Doxygen (if building documentation)\r\n\r\nIt also requires a CUDA-enabled Nvidia GPU.\r\n\r\nTo build, run `make` and specify a `CUDA_ROOT` environment variable. E.g.,\r\n\r\n    $ CUDA_ROOT=/opt/cuda-5.0 make\r\n\r\nDocumentation\r\n-------------\r\nThe code is fully documented for Doxygen. To build HTML and LaTeX\r\ndocumentation, run\r\n\r\n    $ make doc\r\n\r\nThe output is placed into the `doc` directory.\r\n\r\nUsage\r\n-----\r\n1. Create PDFs: PDFs are ROOT TH2Fs with event energy and radius dimensions.\r\n   Each PDF is stored in its own ROOT file and named \"pdf\".\r\n\r\n2. Configure fit: Set up the fit parameters and signal PDFs using a JSON-format\r\n   configuration file. An example is provided in `config/`.\r\n\r\n3. To calculate signal sensitivity, run:\r\n   `$ ./bin/sensitivity config/your_file.json`\r\n\r\nConfiguration Files\r\n-------------------\r\nThe fit is controlled via a JSON-format configuration file. See\r\n`config/example.json` for an annotated example.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}